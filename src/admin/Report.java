package admin;

import user.HDBManager;
import project.Application;
import project.FlatType;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class Report {
    private String reportId;
    private HDBManager generatedBy;
    private Date generatedDate;
    private Map<String, Object> filters;
    private List<Application> applications;

    public Report(String reportId, HDBManager generatedBy, Map<String, Object> filters) {
        this.reportId = reportId;
        this.generatedBy = generatedBy;
        this.generatedDate = new Date();
        this.filters = filters;
        this.applications = new ArrayList<>();
    }

    // Getters
    public String getReportId() {
        return reportId;
    }

    public HDBManager getGeneratedBy() {
        return generatedBy;
    }

    public Date getGeneratedDate() {
        return generatedDate;
    }

    public Map<String, Object> getFilters() {
        return filters;
    }

    public List<Application> getApplications() {
        return applications;
    }

    public void setApplications(List<Application> applications) {
        this.applications = applications;
    }

    public List<Application> applyFilters(Map<String, Object> filters) {
        List<Application> filteredApplications = new ArrayList<>(applications);
        
        // Apply filters based on the map keys
        if (filters.containsKey("maritalStatus")) {
            String maritalStatus = (String) filters.get("maritalStatus");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getApplicant().getMaritalStatus().equals(maritalStatus))
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("flatType")) {
            FlatType flatType = (FlatType) filters.get("flatType");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getFlatType() == flatType)
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("projectName")) {
            String projectName = (String) filters.get("projectName");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getProject().getProjectName().equals(projectName))
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("minAge")) {
            int minAge = (int) filters.get("minAge");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getApplicant().getAge() >= minAge)
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("maxAge")) {
            int maxAge = (int) filters.get("maxAge");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getApplicant().getAge() <= maxAge)
                .collect(Collectors.toList());
        }
        
        return filteredApplications;
    }

    public File generatePDF() {
        // Placeholder for PDF generation logic
        // In a real implementation, this would create a PDF with report details
        System.out.println("Generating PDF report " + reportId);
        System.out.println("Generated by: " + generatedBy.getNric());
        System.out.println("Generated on: " + generatedDate);
        System.out.println("Filters applied: " + filters);
        System.out.println("Number of applications: " + applications.size());
        
        // Print summary of applications
        System.out.println("\nApplication Summary:");
        for (Application app : applications) {
            System.out.println("- Applicant: " + app.getApplicant().getNric());
            System.out.println("  Project: " + app.getProject().getProjectName());
            System.out.println("  Flat Type: " + app.getFlatType());
            System.out.println("  Status: " + app.getStatus());
        }
        
        // Return a dummy file
        return new File("report_" + reportId + ".pdf");
    }
}
