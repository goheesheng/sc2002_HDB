package admin;

import user.HDBManager;
import project.Application;
import project.FlatType;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

/**
 * Represents a report generated by an HDB Manager.
 * Contains information about the applications filtered by specified criteria.
 * 
 * @author SC2002 G Team
 * @version 1.0
 * @since 2025-03-16
 */
public class Report {
    private String reportId;
    private HDBManager generatedBy;
    private Date generatedDate;
    private Map<String, Object> filters;
    private List<Application> applications;

    static {
        // Suppress PDFBox font-related warnings
        java.util.logging.Logger.getLogger("org.apache.pdfbox").setLevel(java.util.logging.Level.SEVERE);
    }

    /**
     * Creates a new Report with the specified details.
     * 
     * @param reportId The unique identifier for this report
     * @param generatedBy The HDB Manager who generated this report
     * @param filters The criteria used to filter applications
     */
    public Report(String reportId, HDBManager generatedBy, Map<String, Object> filters) {
        this.reportId = reportId;
        this.generatedBy = generatedBy;
        this.generatedDate = new Date();
        this.filters = filters;
        this.applications = new ArrayList<>();
    }

    /**
     * Gets the unique identifier of this report.
     * 
     * @return The report ID
     */
    public String getReportId() {
        return reportId;
    }
    
    /**
     * Gets the HDB Manager who generated this report.
     * 
     * @return The manager who generated the report
     */
    public HDBManager getGeneratedBy() {
        return generatedBy;
    }
    
    /**
     * Gets the date when this report was generated.
     * 
     * @return The generation date
     */
    public Date getGeneratedDate() {
        return generatedDate;
    }
    
    /**
     * Gets the filters used to generate this report.
     * 
     * @return The filters applied
     */
    public Map<String, Object> getFilters() {
        return filters;
    }
    
    /**
     * Gets the list of applications included in this report.
     * 
     * @return The list of applications
     */
    public List<Application> getApplications() {
        return applications;
    }
    
    /**
     * Sets the list of applications for this report.
     * 
     * @param applications The new list of applications
     */
    public void setApplications(List<Application> applications) {
        this.applications = applications;
    }
    
    /**
     * Applies filters to the list of applications based on the provided criteria.
     * 
     * @param filters The criteria to apply
     * @return The filtered list of applications
     */
    public List<Application> applyFilters(Map<String, Object> filters) {
        List<Application> filteredApplications = new ArrayList<>(applications);
        
        // Apply filters based on the map keys
        if (filters.containsKey("maritalStatus")) {
            String maritalStatus = (String) filters.get("maritalStatus");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getApplicant().getMaritalStatus().equals(maritalStatus))
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("flatType")) {
            FlatType flatType = (FlatType) filters.get("flatType");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getFlatType() == flatType)
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("projectName")) {
            String projectName = (String) filters.get("projectName");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getProject().getProjectName().equals(projectName))
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("minAge")) {
            int minAge = (int) filters.get("minAge");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getApplicant().getAge() >= minAge)
                .collect(Collectors.toList());
        }
        
        if (filters.containsKey("maxAge")) {
            int maxAge = (int) filters.get("maxAge");
            filteredApplications = filteredApplications.stream()
                .filter(app -> app.getApplicant().getAge() <= maxAge)
                .collect(Collectors.toList());
        }
        
        return filteredApplications;
    }

    /**
     * Generates a PDF file representing this report.
     * This method simulates PDF generation and returns a placeholder file.
     * In a real implementation, it would create a PDF with report details.
     * 
     * @return A File object representing the generated PDF
     */
    public File generatePDF() {
        try {
            // Create a new PDF document
            PDDocument document = new PDDocument();
            PDPage page = new PDPage();
            document.addPage(page);

            // Create a content stream for the page
            PDPageContentStream contentStream = new PDPageContentStream(document, page);

            // Set up fonts
            PDType1Font titleFont = PDType1Font.HELVETICA_BOLD;
            PDType1Font headerFont = PDType1Font.HELVETICA_BOLD;
            PDType1Font bodyFont = PDType1Font.HELVETICA;

            // Write report header
            contentStream.beginText();
            contentStream.setFont(titleFont, 16);
            contentStream.newLineAtOffset(50, 750);
            contentStream.showText("HDB BTO Application Report");
            contentStream.endText();

            // Write report details
            contentStream.beginText();
            contentStream.setFont(bodyFont, 12);
            contentStream.newLineAtOffset(50, 700);
            contentStream.showText("Report ID: " + reportId);
            contentStream.newLineAtOffset(0, -20);
            contentStream.showText("Generated by: " + generatedBy.getName());
            contentStream.newLineAtOffset(0, -20);
            contentStream.showText("Generated on: " + generatedDate);
            contentStream.newLineAtOffset(0, -20);
            contentStream.showText("Number of applications: " + applications.size());
            contentStream.endText();

            // Write filter details
            contentStream.beginText();
            contentStream.setFont(headerFont, 12);
            contentStream.newLineAtOffset(50, 600);
            contentStream.showText("Filters Applied:");
            contentStream.endText();

            contentStream.beginText();
            contentStream.setFont(bodyFont, 12);
            contentStream.newLineAtOffset(50, 580);
            for (Map.Entry<String, Object> entry : filters.entrySet()) {
                contentStream.showText(entry.getKey() + ": " + entry.getValue());
                contentStream.newLineAtOffset(0, -20);
            }
            contentStream.endText();

            // Write application details
            contentStream.beginText();
            contentStream.setFont(headerFont, 12);
            contentStream.newLineAtOffset(50, 500);
            contentStream.showText("Application Details:");
            contentStream.endText();

            int yOffset = 480;
            contentStream.beginText();
            contentStream.setFont(bodyFont, 10);
            contentStream.newLineAtOffset(50, yOffset);
            
            for (Application app : applications) {
                if (yOffset < 50) {
                    // Create a new page if we're running out of space
                    contentStream.endText();
                    contentStream.close();
                    
                    page = new PDPage();
                    document.addPage(page);
                    contentStream = new PDPageContentStream(document, page);
                    
                    contentStream.beginText();
                    contentStream.setFont(bodyFont, 10);
                    contentStream.newLineAtOffset(50, 750);
                    yOffset = 750;
                }

                contentStream.showText("Application ID: " + app.getApplicationId());
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Applicant: " + app.getApplicant().getName() + " (" + app.getApplicant().getNric() + ")");
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Project: " + app.getProject().getProjectName());
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Flat Type: " + app.getFlatType());
                contentStream.newLineAtOffset(0, -15);
                contentStream.showText("Status: " + app.getStatus());
                contentStream.newLineAtOffset(0, -30);
                
                yOffset -= 75;
            }
            contentStream.endText();

            // Close the content stream
            contentStream.close();

            // Save the document
            // Create reports directory if it doesn't exist
            File reportsDir = new File("reports");
            if (!reportsDir.exists()) {
                reportsDir.mkdir();
            }
            
            String filename = "reports/report_" + reportId + ".pdf";
            document.save(filename);
            document.close();

            return new File(filename);
        } catch (IOException e) {
            System.err.println("Error generating PDF report: " + e.getMessage());
            return null;
        }
    }
}
